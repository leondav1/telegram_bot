import urllib

import cv2
import telebot

try:
    import config
except ImportError:
    exit('Do cp config.py.default config.py and set token!')


bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}üëã\n'
                                      f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –ª–∏–±–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –≤ —á–∞—Ç '
                                      f'–∏ —è —Å–∫–∞–∂—É –≤–∞–º, –µ—Å—Ç—å –ª–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–µ—Ç.'
                                      f'–ö–æ–Ω–µ—á–Ω–æ, —è –ø–æ–∫–∞ –Ω–µ –∏–¥–µ–∞–ª—å–Ω—ã–π, –ø–æ—ç—Ç–æ–º—É –º–æ–≥—É –Ω–µ–º–Ω–æ–∂–∫–æ –æ—à–∏–±–∞—Ç—å—Å—è))')


@bot.message_handler(content_types=['text'])
def send_text(message):
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç')
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAMLXypkoZmlRuZnrV7YfHL38PJP3L0AAqMJAAJ5XOIJdgKQ_ca2-QwaBA')
    elif message.text.lower() == '–ø–æ–∫–∞':
        bot.send_message(message.chat.id, '–ü–æ–∫–∞, –ø–æ–∫–∞')
    else:
        bot.send_message(message.chat.id, '–ü–æ–∫–∞ —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ')


@bot.message_handler(content_types=["document"])
def handle_docs_audio(message):
    if not message.document.thumb:
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞')
        return
    document_id = message.document.file_id
    file_info = bot.get_file(document_id)
    urllib.request.urlretrieve(f'http://api.telegram.org/file/bot{config.TOKEN}/{file_info.file_path}', file_info.file_path)
    face_cascade_funk(file_info, message)


def view_image(image, name_of_window):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ–∫–Ω–∞—Ö windows
    """
    cv2.namedWindow(name_of_window, cv2.WINDOW_NORMAL)
    cv2.imshow(name_of_window, image)
    cv2.waitKey()
    cv2.destroyAllWindows()


@bot.message_handler(content_types=['photo'])
def send_photo(message):
    photos = message.photo[-1]
    photo_id = photos.file_id
    file_info = bot.get_file(photo_id)
    urllib.request.urlretrieve(f'http://api.telegram.org/file/bot{config.TOKEN}/{file_info.file_path}', file_info.file_path)
    face_cascade_funk(file_info, message)


def face_cascade_funk(file_info, message):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –ª–∏—Ü–∞ –Ω–∞ —Ñ–æ—Ç–æ, —Ä–∏—Å—É–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç—ã –≤–æ–∫—Ä—É–≥ –ª–∏—Ü
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç
    """
    face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
    image = cv2.imread(file_info.file_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(
        gray,
        scaleFactor=1.1,
        minNeighbors=11,
        minSize=(10, 10),
    )
    # –†–∏—Å—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç—ã –≤–æ–∫—Ä—É–≥ –ª–∏—Ü
    for (x, y, w, h) in faces:
        cv2.rectangle(image, (x, y), (x + w, y + h), (255, 255, 0), 10)
    new_image_path = file_info.file_path.replace('photos', 'photos_results')
    cv2.imwrite(new_image_path, image)
    file = open(new_image_path, 'rb')
    if len(faces):
        bot.send_photo(message.chat.id, file)
        bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –ª–∏—Ü –Ω–∞ —Ñ–æ—Ç–æ: {len(faces)}')
    else:
        bot.send_message(message.chat.id, '–ù–∞ —Ñ–æ—Ç–æ –ª–∏—Ü –Ω–µ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')
    file.close()
    # view_image(image, 'Detected face')


@bot.message_handler(content_types=['sticker'])
def send_sticker(message):
    print(message.sticker)


bot.polling(none_stop=True, timeout=123)
